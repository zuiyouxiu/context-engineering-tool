// 上下文工程管理文件模板系统
import { formatTimestamp } from '../utils/path-utils.js';

/**
 * 生成上下文工程管理文件模板
 */
export function getContextEngineeringTemplates(): Record<string, string> {
  const timestamp = formatTimestamp();

  return {
    "productContext.md": `# 产品上下文

本文件提供项目的高层概览以及预期创建的产品信息。最初基于 projectBrief.md（如果提供）和工作目录中所有其他可用的项目相关信息。本文件旨在随着项目发展而更新，并应用于指导项目的所有其他方面的目标和上下文。
${timestamp} - 更新日志将作为脚注附加到文件末尾。

*

## 项目目标

*   

## 关键功能

*   

## 整体架构

*   

## 存量项目分析

### 技术栈识别
- **主要语言**: [JavaScript/Python/Java/C#/Go/等]
- **后端框架**: [Express/Django/Spring/ASP.NET/等]
- **前端技术**: [React/Vue/Angular/jQuery/等]  
- **数据库**: [MySQL/PostgreSQL/MongoDB/Redis/等]
- **部署方式**: [Docker/传统部署/云服务/等]
- **依赖管理**: [npm/pip/maven/nuget/等]

### 项目健康度评估
- **文档完整度**: _% (评估结果)
- **测试覆盖率**: _% (评估结果)  
- **代码复杂度**: [low/medium/high/extreme]
- **技术债务等级**: [manageable/significant/critical]

### 风险评估
- **高风险模块**: [列出复杂且缺少测试的模块]
- **核心业务路径**: [关键业务流程标识]
- **未知区域**: [需要深入分析的代码区域]
- **安全修改区域**: [相对安全可以优先处理的区域]

### 接管策略
- **推荐模式**: [超保守/保守/平衡/正常]
- **观察期建议**: [时间长度]
- **学习优先级**: [按重要性排序的模块列表]

*注：此section仅在处理存量项目（缺少文档/测试的遗留系统）时填写*`,

    "activeContext.md": `# 活跃上下文

本文件跟踪项目的当前状态，包括最近的变更、当前目标和待解决的问题。
${timestamp} - 更新日志。

*

## 当前关注点

*   

## 最近变更

*   

## 待解决问题/议题

*   

## 存量项目理解进度

### 已理解模块 (置信度 > 85%)
- **[模块名]**: [核心功能描述] - 置信度: _%
- **[模块名]**: [核心功能描述] - 置信度: _%

### 部分理解模块 (置信度 60-85%)  
- **[模块名]**: [已理解部分] - 置信度: _% 
  - 待澄清: [具体疑问]
  - 下一步: [分析计划]

### 未理解区域 (置信度 < 60%)
- **[模块名]**: 复杂度[high/extreme] - 需要专项分析
- **[模块名]**: 缺乏入口点 - 需要更多上下文

### 假设验证记录
- **假设**: [具体假设内容]
  - 证据支持: [证据列表]
  - 证据反驳: [反证列表] 
  - 验证状态: [testing/verified/refuted]
  - 置信度: _%

*注：此section用于存量项目的渐进式理解管理*`,

    "progress.md": `# 进度

本文件使用任务列表格式跟踪项目的进度。
${timestamp} - 更新日志。

*

## 已完成任务

*   

## 当前任务

*   

## 下一步计划

*   

## 存量项目分析进度

### 第1阶段: 侦察阶段 (Reconnaissance)
- [ ] 项目结构分析和技术栈识别
- [ ] 健康度快速评估 (文档/测试/复杂度)
- [ ] 风险等级确定和策略选择
- [ ] 初步架构模式识别

### 第2阶段: 挖掘阶段 (Excavation)  
- [ ] 核心模块依赖关系映射
- [ ] 主要业务流程识别
- [ ] API端点和数据模型分析
- [ ] 错误处理和安全机制理解

### 第3阶段: 解释阶段 (Interpretation)
- [ ] 业务规则和验证逻辑理解
- [ ] 系统行为模式总结
- [ ] 假设验证和知识确认
- [ ] 风险评估和安全区域标识

### 第4阶段: 保护阶段 (Preservation)
- [ ] 完整项目理解文档生成
- [ ] 关键业务逻辑文档化
- [ ] 测试用例设计和实现
- [ ] 持续知识更新机制建立

*注：此section用于追踪存量项目的渐进式理解过程*`,

    "decisionLog.md": `# 决策日志

本文件使用列表格式记录架构和实现决策。
${timestamp} - 更新日志。

*

## 决策

*

## 理由 

*

## 实现细节

*   

## 存量项目接管决策 (ARCHAEOLOGICAL_DECISIONS)

### 风险管控决策
- **接管策略选择**: [超保守/保守/平衡/正常]
  - 决策依据: 项目健康度评分 _%, 业务重要性 [high/medium/low]
  - 观察期设定: [时间长度] 
  - 关键约束: [主要限制条件]

### 分析优先级决策  
- **核心模块优先级**: [按重要性排序]
  - 选择理由: [业务价值/技术复杂度/风险程度]
  - 分析深度: [superficial/moderate/deep]
  - 时间分配: [每个模块的时间预算]

### 技术假设决策
- **关键技术假设**: [重要的技术推断]
  - 验证方法: [如何验证这些假设]
  - 置信度要求: [接受的最低置信度]
  - 风险后果: [假设错误的影响]

### 修改策略决策
- **允许修改的范围**: [哪些区域可以安全修改]
- **禁止修改的区域**: [高风险区域列表]
- **修改审批流程**: [变更的审核机制]

*注：此section记录存量项目接管过程中的重要决策*`,

    "systemPatterns.md": `# 系统模式 *可选*

本文件记录项目中使用的重复模式和标准。
虽然是可选的，但建议随着项目发展而更新。
${timestamp} - 更新日志。

*

## 编码模式

*   

## 架构模式

*   

## 测试模式

*   

## 存量项目考古发现

### 发现的代码模式
- **[模式名称]**: [模式描述]
  - 出现位置: [文件路径列表]
  - 推断用途: [功能推测]
  - 风险等级: [low/medium/high]
  - 修改策略: [safe/risky/forbidden]

### 隐藏依赖关系
- **[依赖名称]**: [依赖类型: hard/soft/implicit]
  - 发现方法: [如何发现的]
  - 影响分析: [对系统的影响]
  - 缓解策略: [如何处理]

### 业务逻辑发现
- **[业务领域]**: 
  - 推断规则: [业务规则列表]
  - 边界条件: [特殊情况处理]
  - 验证逻辑: [数据验证规则]
  - 错误处理: [异常处理模式]

### 搜索策略记录
- **有效关键词**: [用于搜索的关键词列表]
- **搜索模式**: [成功的搜索模式]
- **分析方法**: [有效的分析方法]

*注：此section记录存量项目分析过程中的考古发现*`,
  };
}

/**
 * 获取详细的上下文工程管理文件指导
 */
export function getDetailedFileGuide(): Record<string, any> {
  return {
    "productContext.md": {
      role: "项目概览和产品定义的核心文件",
      purpose:
        "定义项目目标、核心功能和整体架构，为所有开发活动提供战略指导",
      updateTriggers: [
        "架构变更",
        "新功能添加", 
        "产品目标调整",
        "核心业务逻辑变更",
        "存量项目健康度评估完成",
        "接管策略确定",
      ],
      updateStrategy:
        "保持高层次视角，专注于长期目标和核心价值；存量项目需重点记录风险评估和接管策略",
      sections: {
        "项目目标":
          "核心项目目标和价值提案，在主要目标调整时更新",
        "关键功能":
          "核心产品功能列表，在新功能完成时添加相应描述", 
        "整体架构":
          "系统架构的高层次描述，在架构变更时必须同步更新",
        "存量项目分析":
          "项目健康度评估、风险分析和接管策略，仅在处理遗留系统时使用",
      },
      priority: 1,
      legacyProjectEnhancements: {
        healthAssessment: "记录文档完整度、测试覆盖率、代码复杂度评估结果",
        riskEvaluation: "标识高风险模块、核心业务路径和安全修改区域", 
        takeoverStrategy: "确定接管模式（超保守/保守/平衡/正常）和观察期长度",
      },
    },
    "activeContext.md": {
      role: "当前项目状态和实时信息的跟踪文件",
      purpose:
        "记录当前工作重点、最近变更和待解决问题，保持项目状态的实时可见性",
      updateTriggers: [
        "任何代码变更",
        "新任务开始",
        "问题发现", 
        "状态转换",
        "存量项目理解进度更新",
        "假设验证结果",
      ],
      updateStrategy:
        "频繁更新，保持信息的新鲜度，定期清理过时内容；存量项目需持续更新理解进度",
      sections: {
        "当前关注点":
          "当前主要工作重点，在任务切换时必须更新",
        "最近变更":
          "最近的变更记录，所有变更都需要在此记录",
        "待解决问题/议题":
          "待解决的问题和疑问，发现问题时立即添加",
        "存量项目理解进度":
          "渐进式理解管理，包含置信度跟踪和假设验证记录",
      },
      priority: 2,
      legacyProjectEnhancements: {
        understandingProgress: "按置信度分类记录模块理解状况，包含已理解、部分理解和未理解区域",
        hypothesisTracking: "系统化管理和验证关于项目的技术和业务假设",
        knowledgeGaps: "明确标识需要进一步分析的知识空白区域",
      },
    },
    "progress.md": {
      role: "任务进度管理和完成状态跟踪文件",
      purpose:
        "管理任务生命周期，跟踪从规划到完成的完整过程",
      updateTriggers: [
        "任务创建",
        "任务完成",
        "任务状态变更",
        "里程碑达成",
      ],
      updateStrategy:
        "保持时间顺序，定期将已完成任务移动到已完成区域",
      sections: {
        "已完成任务":
          "已完成任务列表，任务完成时立即移动到此部分",
        "当前任务":
          "正在进行的任务，任务开始时添加，完成时删除",
        "下一步计划": "计划中的后续任务，在规划时添加",
      },
      priority: 3,
    },
    "decisionLog.md": {
      role: "重要决策和技术选择的记录文件",
      purpose:
        "记录关键决策的过程、原因和影响，为未来参考提供依据",
      updateTriggers: [
        "架构决策",
        "技术选型",
        "重要业务逻辑决策",
        "设计模式选择",
      ],
      updateStrategy:
        "详细记录决策背景、考虑因素和最终选择，方便未来回顾",
      sections: {
        决策: "具体决策内容",
        理由: "决策的原因和考虑因素",
        "实现细节":
          "决策的具体实现细节",
      },
      priority: 4,
    },
    "systemPatterns.md": {
      role: "项目中使用的模式和标准的文档文件",
      purpose:
        "记录重复使用的代码模式、架构模式和测试模式，促进一致性",
      updateTriggers: [
        "新模式发现",
        "标准变更",
        "最佳实践总结",
      ],
      updateStrategy:
        "总结和抽象常用模式，定期整理和更新",
      sections: {
        "编码模式": "代码层面的常用模式",
        "架构模式": "架构层面的设计模式",
        "测试模式": "测试相关的模式和标准",
      },
      priority: 5,
    },
  };
}